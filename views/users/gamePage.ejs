<!DOCTYPE html>
<html lang="en"> 

    <head>
        <!--setting web page dimension characteristics and compatibility settings-->
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Oh My Wordle</title>

        <!--Bootstrap libraries, css and javascript files-->
        <!--<link rel="stylesheet" href="css/bootstrap.css">-->
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap-theme.min.css">
        <link rel="stylesheet" href="/gameStyles.css"/>
        <script src="gamePage.js" defer></script>       

    </head>
    <body>
        <!-- setting page title container -->
     <div class="container">
        <div class="text-center my-4">
            <h1><strong>OH MY WORDLE!</strong></h1>
        </div>
     
        <!-- creating the tiles for the guessing grid using bootstrap 5-->
        <div data-guess-grid class="guess-grid">
          <div class="tile" ></div>
          <div class="tile" ></div>
          <div class="tile" ></div>
          <div class="tile" ></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
        </div>
     <!--Container with keyboard buttons in it for the on screen keyboard-->
     <div class="onScreenkeyboard-container">
        <div class="keyboard-row">
            <button class="key" data-key="q">q</button>
            <button class="key" data-key="w">w</button>
            <button class="key" data-key="e">e</button>
            <button class="key" data-key="r">r</button>
            <button class="key" data-key="t">t</button>
            <button class="key" data-key="y">y</button>
            <button class="key" data-key="u">u</button>
            <button class="key" data-key="i">i</button>
            <button class="key" data-key="o">o</button>
            <button class="key" data-key="p">p</button>
        </div>
        <!--second row with keyboard buttons in it for the on screen keyboard-->
        <div class="keyboard-row">
            <div class="spacer-half"></div>
            <button class="key" data-key="a">a</button>
            <button class="key" data-key="s">s</button>
            <button class="key" data-key="d">d</button>
            <button class="key" data-key="f">f</button>
            <button class="key" data-key="g">g</button>
            <button class="key" data-key="h">h</button>
            <button class="key" data-key="j">j</button>
            <button class="key" data-key="k">k</button>
            <button class="key" data-key="l">l</button>
            <button data-enter class="key large">Enter</button>
            <div class="spacer-half"></div>
            
        </div>
        <!--third row  with keyboard buttons in it for the on screen keyboard-->
        <div class="keyboard-row">
            <div class="spacer-half"></div>
            <button class="key" data-key="z">z</button>
            <button class="key" data-key="x">x</button>
            <button class="key" data-key="c">c</button>
            <button class="key" data-key="v">v</button>
            <button class="key" data-key="b">b</button>
            <button class="key" data-key="n">n</button>
            <button class="key" data-key="m">m</button>
            <button class="key" data-delete class="wide-button">delete</button>
            
        </div>

        </div>
        <button style = "position:absolute; right:80px; bottom:20px;" class="buttonMenu" id="Back">Back</button> 
    </body>

<script> 
// Update the grid guesses
const guessingGrid = document.querySelector("[data-guess-grid]")
const answer = "apple"

// A function to refresh  the programme to find if the keyboard or mouse has been clicked
refreshInteraction()

// Function to listen out for a button press
function refreshInteraction()                           //refreshInteraction uses the built in addEventListener to listen out for a mouse click on
{                                                       // the buttons of the keyboard on the web page and for when one of the keys on the user's
  document.addEventListener("click", MouseClick )      // keys are pressed
  document.addEventListener("keydown", KeyPressed)
}

function completeInteraction()                           //This function  uses the built in function 'removeEventListener' which will end the listening  
{                                                        // out for an interaction which will be used when a win or loss occurs
  document.removeEventListener("click", MouseClick )
  document.removeEventListener("keydown", KeyPressed)
}

// Function to register which button-key was pressed
function MouseClick(event)                               // An input event button is inputted into the function and checks if it matches   
{                                                        // any of the set alphabet letters. then it returns which button was pressed 
    if (event.target.matches("[data-key]"))
    {
     pressedKey(event.target.dataset.key)    // The specific key that was pressed is sent to a function that will enter it into the row for the guess
     return
    }

    if (event.target.matches("[data-delete]")) 
    {                                           
        DeleteRow()                             // Call the delete function to delete the letters in the row
        return
    }

    if (event.target.matches("[data-enter]"))
    {
        submitGuess()                         // Call the function to check if the 
        return
    }
}

// Function to register which key on the user's keyboard was pressed
function KeyPressed(event)                
{                                        // The key that was pressed down is ompared to a letter in the alphabet to
    if (event.key.match(/^[a-z]$/))      // be approved for the input guess
    {
        pressedKey(event.key)
        return
    }

    if (event.key === "Enter")
    {
        submitGuess()
        return        
    }

    if (event.key === "Delete")
    {
        DeleteRow()
        return        
    }

}

function pressedKey(key)
{
    const wordLength = getWord()     // This function checks the length of the word to know when the user has completed a guessed word
    if (wordLength.length > 4)             // and if the word is less than 5 letters then it will place the inputted word
    {
        return
    }
    const FollowingTile = guessingGrid.querySelector(":not([data-letter])")
    FollowingTile.dataset.letter = key
    FollowingTile.textContent = key
    FollowingTile.dataset.state = "taken"
}

function getWord()  //Returns the word
{
    const wordLen = guessingGrid.querySelectorAll('[data-state="taken"]')  // Returns a string of the word being inputted
    return wordLen
}

function DeleteRow()                             //Function to delete the entire row calls the current word in the row 
{                                                // and each element in the string is deleted and cleared to delete the 
    const filledTiles = getWord()                // entire string/word

    for (let i=0;i < filledTiles.length;i++)
    {
        if (filledTiles == null)
        {
            return                               //Nothing to delete
        }
        filledTiles[i].textContent = ""
        delete filledTiles[i].dataset.state      //empty the string and remove the state to reset it
        delete filledTiles[i].dataset.letter
    }

}

function submitGuess()                        //Function to submit the guess
{
    const filledTiles = [...getWord()]

    if (filledTiles.length < 5)
    {
        console.log("Word not long enough")    // Function will output an error message if the inputted word 
        return                                 // is smaller than the word to be guessed
    }

    const attempt = filledTiles.reduce((word,tile) =>
    {
        return word + tile.dataset.letter
    }, "")
    
    if (answer != attempt)
    {
        console.log(attempt)
        return
    }

    if (answer == attempt)
    {
        console.log("You win")
        return
    }
}

const Backbutton= document.getElementById('Back')

//Back button destination
Backbutton.addEventListener('click', function () {
    window.location.href = ("/home");
}, false)
</script>

<!--include javascript files <script src="js/bootstrap.bundle.js"></script>
<script src="gamePage.js"></script>-->


</html>
