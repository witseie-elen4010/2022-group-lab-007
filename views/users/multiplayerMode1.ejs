<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title>OMW! Multiplayer</title>
    <!--style and socket library inclusions-->
    <link rel="stylesheet" href="/gameStyles.css"/>    
    <script src="/socket.io/socket.io.js"></script>

  </head>
  <body>
      <div class="container">
        <div class="text-center my-4">
          <!-- All the different buttons for navigation -->     
         <button id="multiPlayerButton">Ready to Go!</button>
         <button id="start">Ready to Play!</button>
         <h2>You</h2>
         <h3>Your enemy</h3>
         <hr />

        <div></div>
        <!-- creating the tiles for the guessing grid using bootstrap 5-->
        <div data-guess-grid class="Multi-guess-grid1">
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
        </div>

        <!-- creating the tiles for the guessing grid using bootstrap 5-->
        <div data-guess-grid class="Multi-guess-grid2">
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div> 
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
        </div>
        </div>
        </div>
       <!--Container with keyboard buttons in it for the on screen keyboard-->
    <div class="onScreenkeyboard-container">
      <div data-keyboard class="keyboard-row">
        <button class="key" data-key="q">q</button>
        <button class="key" data-key="w">w</button>
        <button class="key" data-key="e">e</button>
        <button class="key" data-key="r">r</button>
        <button class="key" data-key="t">t</button>
        <button class="key" data-key="y">y</button>
        <button class="key" data-key="u">u</button>
        <button class="key" data-key="i">i</button>
        <button class="key" data-key="o">o</button>
        <button class="key" data-key="p">p</button>
      </div>
       <!--second row with keyboard buttons in it for the on screen keyboard-->
      <div data-keyboard class="keyboard-row"> 
        <div class="spacer-half"></div>
        <button class="key" data-key="a">a</button>
        <button class="key" data-key="s">s</button>
        <button class="key" data-key="d">d</button>
        <button class="key" data-key="f">f</button>
        <button class="key" data-key="g">g</button>
        <button class="key" data-key="h">h</button>
        <button class="key" data-key="j">j</button>
        <button class="key" data-key="k">k</button>
        <button class="key" data-key="l">l</button>
        <button data-enter class="key large">Enter</button>
        <div class="spacer-half"></div>
            
      </div>
        <!--third row  with keyboard buttons in it for the on screen keyboard-->
      <div data-keyboard class="keyboard-row">
        <div class="spacer-half"></div>
        <button class="key" data-key="z">z</button>
        <button class="key" data-key="x">x</button>
        <button class="key" data-key="c">c</button>
        <button class="key" data-key="v">v</button>
        <button class="key" data-key="b">b</button>
        <button class="key" data-key="n">n</button>
        <button class="key" data-key="m">m</button>
        <button class="key" data-delete class="wide-button">delete</button>
      </div>
       <!--Divisions to confirm whether a player has connected-->
        <div class="player p1">
         Player 1
         <div class="connected">Connected <span></span></div>
         <div class="ready">Ready <span></span></div>
        </div>
        <div class="player p2">
         Player 2
         <div class="connected">Connected <span></span></div>
         <div class="ready">Ready <span></span></div>
        </div>              
    </div>
      <button style = "position:absolute; right:80px; bottom:20px;" class="buttonMenu" id="Back">Back</button> 
    </body>
  
  </body>


  <!--Insert game and socket connection logic here-->
<script>
  
document.addEventListener('DOMContentLoaded', () => {
    const userGrid = document.querySelector('.Multi-grid-user')
    const computerGrid = document.querySelector('.grid-computer')
    const displayGrid = document.querySelector('.grid-display')
    const startButton = document.querySelector('#start')
    const turnDisplay = document.querySelector('#whose-go')
    const infoDisplay = document.querySelector('#info')
    const multiPlayerButton = document.querySelector('#multiPlayerButton')

    let isGameOver = false
    let currentPlayer = 'user'
    const width = 10
    let gameMode = ""
    let playerNum = 0
    let ready = false
    let enemyReady = false

  
    // Select Player Mode
    multiPlayerButton.addEventListener('click', startMultiPlayer)

    //startButton.addEventListener('click', playerReady)

 
    // Multiplayer
    function startMultiPlayer() {
      gameMode = 'multiPlayer'
  
      const socket = io();
  
      // Get your player number
      socket.on('player-number', num => {
      {
       playerNum = parseInt(num)
       if(playerNum === 1) currentPlayer = "enemy"
  
       console.log(playerNum)
  
       // Get other player status
       socket.emit('check-players')
       }
      })
  
      // Another player has connected or disconnected
      socket.on('player-connection', num => {
        console.log(`Player number ${num} has connected or disconnected`)
        playerConnectedOrDisconnected(num)
      })
  
     // On enemy ready
     socket.on('enemy-ready', num => {
       enemyReady = true
       playerReady(num)
       if (ready) {
         playGameMulti(socket)
         //setupButtons.style.display = 'none'
      }
    })

      // Check player status
      socket.on('check-players', players => {
        players.forEach((p, i) => {
          if(p.connected) 
          {
              playerConnectedOrDisconnected(i)
          }
          if(p.ready) 
          {
             playerReady(i)
             if(i !== playerReady) {enemyReady = true}
          }
        })
      })
  
      // On Timeout
      socket.on('timeout', () => {
        infoDisplay.innerHTML = 'You have reached the 10 minute limit'
      })

     // Ready button click
     startButton.addEventListener('click', () => {
       console.log("Pressed ready")
       playGameMulti(socket)
      // else infoDisplay.innerHTML = "Please place all ships"
     })

      // Ready button click

     //   // Ready button click
     //   startButton.addEventListener('click', () => {
     //     if(allShipsPlaced) playGameMulti(socket)
     //     else infoDisplay.innerHTML = "Please place all ships"
     //   })     
     function playerConnectedOrDisconnected(num) {
        let player = `.p${parseInt(num) + 1}`
        document.querySelector(`${player} .connected span`).classList.toggle('green')
        if(parseInt(num) === playerNum) document.querySelector(player).style.fontWeight = 'bold'
      }  
    }

    // //Create Board
    // function createBoard(grid, squares) {
    //   for (let i = 0; i < width*width; i++) {
    //     const square = document.createElement('div')
    //     square.dataset.id = i
    //     grid.appendChild(square)
    //     squares.push(square)
    //   }
    // }
    // createBoard(userGrid, userSquares)
    // createBoard(computerGrid, computerSquares)

    // Game Logic for MultiPlayer

    function playGameMulti(socket) {

      if(isGameOver) return

      if(!ready) {
       socket.emit('player-ready')
       ready = true
       console.log("At play game multi")
       playerReady(playerNum)
      }      

    }

    function playerReady(num) {
     let player = `.p${parseInt(num) + 1}`
     document.querySelector(`${player} .ready`).classList.toggle('active')
    }


    function GameLogic()
    {
     // Update the grid guesses
     const keyboard = document.querySelector("[data-keyboard]")
     const guessingGrid = document.querySelector("[data-guess-grid]")
     const answer = "Hello"
     console.log(answer)
     const alertContainer = document.querySelector("[data-alert-container]")
     const popUp_Container = document.querySelector("[data-alert-container]") 

     // A function to refresh  the programme to find if the keyboard or mouse has been clicked
     refreshInteraction()   

     // Function to listen out for a button press
     function refreshInteraction()                           //refreshInteraction uses the built in addEventListener to listen out for a mouse click on
     {                                                       // the buttons of the keyboard on the web page and for when one of the keys on the user's
       document.addEventListener("click", MouseClick )      // keys are pressed
       document.addEventListener("keydown", KeyPressed)
     } 
 
     function completeInteraction()                           //This function  uses the built in function 'removeEventListener' which will end the listening  
     {                                                        // out for an interaction which will be used when a win or loss occurs
       document.removeEventListener("click", MouseClick )
       document.removeEventListener("keydown", KeyPressed)
     }
 

     //   if(!ready) {
     //     socket.emit('player-ready')
     //     ready = true
     //     playerReady(playerNum)
     //   }
   
     //   if(enemyReady) {
     //     if(currentPlayer === 'user') {
     //       turnDisplay.innerHTML = 'Your Go'
     //     }
     //     if(currentPlayer === 'enemy') {
     //       turnDisplay.innerHTML = "Enemy's Go"
     //     }
     //   }
    }
  

  
    
})

</script>

</html>
