<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title>OMW! Multiplayer</title>
    <!--style and socket library inclusions-->
    <link rel="stylesheet" href="/gameStyles.css"/>    
    <script src="/socket.io/socket.io.js"></script>

  </head>
  <body>
      <div class="container">
        <div class="text-center my-4">
          <!-- All the different buttons for navigation -->     
         <button id="multiPlayerButton">Ready to Go!</button>
         <button id="start">Ready to Play!</button>
         <h2>You</h2>
         <h3>Your enemy</h3>
         <hr />

        <div></div>
        <!-- creating the tiles for the guessing grid using bootstrap 5-->
        <div data-guess-grid1 class="Multi-guess-grid1">
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
        </div>

        <!-- creating the tiles for the guessing grid using bootstrap 5-->
        <div data-guess-grid2 class="Multi-guess-grid2">
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div> 
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
          <div class="tile"></div>
        </div>
        </div>
        </div>
       <!--Container with keyboard buttons in it for the on screen keyboard-->
    <div class="onScreenkeyboard-container">
      <div data-keyboard class="keyboard-row">
        <button class="key" data-key="q">q</button>
        <button class="key" data-key="w">w</button>
        <button class="key" data-key="e">e</button>
        <button class="key" data-key="r">r</button>
        <button class="key" data-key="t">t</button>
        <button class="key" data-key="y">y</button>
        <button class="key" data-key="u">u</button>
        <button class="key" data-key="i">i</button>
        <button class="key" data-key="o">o</button>
        <button class="key" data-key="p">p</button>
      </div>
       <!--second row with keyboard buttons in it for the on screen keyboard-->
      <div data-keyboard class="keyboard-row"> 
        <div class="spacer-half"></div>
        <button class="key" data-key="a">a</button>
        <button class="key" data-key="s">s</button>
        <button class="key" data-key="d">d</button>
        <button class="key" data-key="f">f</button>
        <button class="key" data-key="g">g</button>
        <button class="key" data-key="h">h</button>
        <button class="key" data-key="j">j</button>
        <button class="key" data-key="k">k</button>
        <button class="key" data-key="l">l</button>
        <button data-enter class="key large">Enter</button>
        <div class="spacer-half"></div>
            
      </div>
        <!--third row  with keyboard buttons in it for the on screen keyboard-->
      <div data-keyboard class="keyboard-row">
        <div class="spacer-half"></div>
        <button class="key" data-key="z">z</button>
        <button class="key" data-key="x">x</button>
        <button class="key" data-key="c">c</button>
        <button class="key" data-key="v">v</button>
        <button class="key" data-key="b">b</button>
        <button class="key" data-key="n">n</button>
        <button class="key" data-key="m">m</button>
        <button class="key" data-delete class="wide-button">delete</button>
      </div>
       <!--Divisions to confirm whether a player has connected-->
        <div class="player p1">
         Player 1
         <div class="connected">Connected <span></span></div>
         <div class="ready">Ready <span></span></div>
        </div>
        <div class="player p2">
         Player 2
         <div class="connected">Connected <span></span></div>
         <div class="ready">Ready <span></span></div>
        </div>              
    </div>
      <button style = "position:absolute; right:80px; bottom:20px;" class="buttonMenu" id="Back">Back</button> 
    </body>
  
  </body>


  <!--Insert game and socket connection logic here-->
<script>

  
    const userGrid = document.querySelector('.Multi-grid-user')
    const computerGrid = document.querySelector('.grid-computer')
    const displayGrid = document.querySelector('.grid-display')
    const startButton = document.querySelector('#start')
    const turnDisplay = document.querySelector('#whose-go')
    const infoDisplay = document.querySelector('#info')
    const multiPlayerButton = document.querySelector('#multiPlayerButton')


const Backbutton= document.getElementById('Back')


// Select Player Mode
multiPlayerButton.addEventListener('click', startMultiPlayer)

//z code
//Restarts socket
const socket=io()
let clientroom;
let playerNum
let num
let answer
let roomsize
socket.emit('ConnectedA')

//Checks the room number of the client
socket.on('serverMsg',(data,num)=>{
    console.log(`I should be in room ${data}`)
        clientroom=data;
        playerNum=num;
})


socket.on('Sentword',(newword)=>{
  //2nd board game logic
  console.log(newword)
})

//socket.emit('SubmitWord',clientroom,word)
//Back button destination
Backbutton.addEventListener('click', function () {
  window.location.href = ("/home");
}, false)

setTimeout(() => {
  if(playerNum==0)
{
  console.log('IM here')
   answer="apple"
  //const answer = dictionary[Math.floor((Math.random()*12971)+0)]
  socket.emit('SetWordSend',answer,clientroom)
}
}, 3000) //3000ms delay

//Receiving the message

socket.on('SetWordReceive',(SetWord)=>{
  console.log(SetWord)
  // game Functions placed here
  let word = "bye"
  socket.emit('SubmitWord',clientroom,word)
  
  GameLogic()
})


// Multiplayer
function startMultiPlayer() {
}

// Game Logic for MultiPlayer

function playGameMulti(socket) {

  if(isGameOver) return

  if(!ready) {
   socket.emit('player-ready')
   ready = true
   console.log("At play game multi")
   playerReady(playerNum)
  }      

}

function playerReady(num) {
 let player = `.p${parseInt(num) + 1}`
 document.querySelector(`${player} .ready span`).classList.toggle('green')
}


function GameLogic()
{
 // Update the grid guesses
 const keyboard = document.querySelector("[data-keyboard]")
 const guessingGrid = document.querySelector("[data-guess-grid1]")
 //console.log(answer)
 const alertContainer = document.querySelector("[data-alert-container]")
 const popUp_Container = document.querySelector("[data-alert-container]") 

 // A function to refresh  the programme to find if the keyboard or mouse has been clicked
 refreshInteraction()   

 // Function to listen out for a button press
 function refreshInteraction()                           //refreshInteraction uses the built in addEventListener to listen out for a mouse click on
 {                                                       // the buttons of the keyboard on the web page and for when one of the keys on the user's
   document.addEventListener("click", MouseClick )      // keys are pressed
   document.addEventListener("keydown", KeyPressed)
 } 

 function completeInteraction()                           //This function  uses the built in function 'removeEventListener' which will end the listening  
 {                                                        // out for an interaction which will be used when a win or loss occurs
   document.removeEventListener("click", MouseClick )
   document.removeEventListener("keydown", KeyPressed)
 }

 function MouseClick(event)                               // An input event button is inputted into the function and checks if it matches   
 {                                                        // any of the set alphabet letters. then it returns which button was pressed 
    if (event.target.matches("[data-key]"))
    {
     pressedKey(event.target.dataset.key)    // The specific key that was pressed is sent to a function that will enter it into the row for the guess
     return
    }

    if (event.target.matches("[data-delete]")) 
    {                                           
      DeleteRow()                             // Call the delete function to delete the letters in the row
      return
    }
    if (event.target.matches("[data-backspace]")) 
    {                                           
      BackSpace()                             // Call the backspace function to delete the most recent letter in the row
      return
    }

    if (event.target.matches("[data-enter]"))
    {
        submitGuess()                         // Call the function to check if the 
        return
    }
}

function KeyPressed(event)                
 {                                        // The key that was pressed down is ompared to a letter in the alphabet to
    if (event.key.match(/^[a-z]$/))      // be approved for the input guess
    {
        pressedKey(event.key)
        return
    }

    if (event.key === "Enter")
    {
        submitGuess()
        return        
    }

    if (event.key === "Delete")
    {
        DeleteRow()
        return        
    }

    if (event.key === "Backspace")
    {
        BackSpace()
        return        
    } 

}

function pressedKey(key)
{
    // const wordLength = getWord()     // This function checks the length of the word to know when the user has completed a guessed word
    // if (wordLength.length > 4)             // and if the word is less than 5 letters then it will place the inputted word
    // {
    //     return
    // }
    const FollowingTile = guessingGrid.querySelector(":not([data-letter])")
    FollowingTile.dataset.letter = key
    FollowingTile.textContent = key
    FollowingTile.dataset.state = "taken"
}

function DeleteRow()                             //Function to delete the entire row calls the current word in the row 
{                                                // and each element in the string is deleted and cleared to delete the 
  const filledTiles = getWord()                // entire string/word

  for (let i=0;i < filledTiles.length;i++)
  {
   if (filledTiles == null)
    {
      return                               //Nothing to delete
    }
    filledTiles[i].textContent = ""
    delete filledTiles[i].dataset.state      //empty the string and remove the state to reset it
    delete filledTiles[i].dataset.letter
  }

}
function BackSpace()                             //Function to backspace the most recent input letter in the current word in the row 
{                                                // and that one recent element in the string is deleted and cleared

    const filledTiles = getWord()
    
    for (let i=(filledTiles.length-1);i < filledTiles.length;i++)
    {
        if (filledTiles == null)
        {
            return                               //Nothing to backspace
        }
        filledTiles[i].textContent = ""
        delete filledTiles[i].dataset.state      //empty the most recent tile and remove the state to reset it
        delete filledTiles[i].dataset.letter
    }

} 

// function getWord()  //Returns the word
// {
//     const wordLen = guessingGrid.querySelectorAll('[data-state="taken"]')  // Returns a string of the word being inputted
//     return wordLen
// }

 //   if(!ready) {
 //     socket.emit('player-ready')
 //     ready = true
 //     playerReady(playerNum)
 //   }

 //   if(enemyReady) {
 //     if(currentPlayer === 'user') {
 //       turnDisplay.innerHTML = 'Your Go'
 //     }
 //     if(currentPlayer === 'enemy') {
 //       turnDisplay.innerHTML = "Enemy's Go"
 //     }
 //   }
}


</script>

</html>
